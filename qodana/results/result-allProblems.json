{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary non-null assertion (!!) on a non-null receiver of type List",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/me/lyzev/rsa/key/RSAKeyFactory.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 70,
      "length": 2,
      "code": {
        "startLine": 14,
        "length": 2,
        "offset": 133,
        "surroundingCode": "\n    fun generateKeyPair(): Pair<RSAPublicKey, RSAPrivateKey> {\n        val random1 = SecureRandom.getInstanceStrong().nextInt(primes!!.size)\n        val random2 = if (SecureRandom.getInstanceStrong().nextBoolean())\n            random1 - 1 - SecureRandom.getInstanceStrong().nextInt(random1)"
      }
    }
  ],
  "attributes": {
    "module": "RSA4K.main",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "9442afb5142cb0636456c6a33d071103ea862abbbc3f0b5b3b73e178d99106a9"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Leaking 'this' in constructor",
  "severity": "High",
  "comment": "Calling non-final function isValid in constructor",
  "detailsInfo": "Reports unsafe operations with `this` during object construction including:\n\n* Accessing a non-final property during class initialization: from a constructor or property initialization\n* Calling a non-final function during class initialization\n* Using `this` as a function argument in a constructor of a non-final class\n\n\nIf other classes inherit from the given class,\nthey may not be fully initialized at the moment when an unsafe operation is carried out.\n\n**Example:**\n\n\n      abstract class Base {\n          val code = calculate()\n          abstract fun calculate(): Int\n      }\n\n      class Derived(private val x: Int) : Base() {\n          override fun calculate() = x\n      }\n\n      fun testIt() {\n          println(Derived(42).code) // Expected: 42, actual: 0\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/me/lyzev/rsa/key/RSAKey.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 15,
        "length": 7,
        "offset": 20,
        "surroundingCode": "\n    init {\n        isValid()\n    }\n}"
      }
    }
  ],
  "attributes": {
    "module": "RSA4K.main",
    "inspectionName": "LeakingThis"
  },
  "hash": "c9d37dc9f57049a1d72c6400b6a5438131303be676eddf64e3e101a06c40fad5"
}]}