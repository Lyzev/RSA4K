{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Function 'genPrivateKey' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/rsa/key/RSAKeyFactory.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 8,
      "length": 13,
      "code": {
        "startLine": 86,
        "length": 13,
        "offset": 49,
        "surroundingCode": "     * @return a RSA private key\n     */\n    fun genPrivateKey(`in`: String): RSAPrivateKey {\n        val n = BigInteger.valueOf(`in`.split(\":\")[1].toLong())\n        val d = `in`.split(\":\")[2].toInt()"
      }
    }
  ],
  "attributes": {
    "module": "RSA4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2903211256714579907"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Function 'genPublicKey' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/me/lyzev/rsa/key/RSAKeyFactory.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 8,
      "length": 12,
      "code": {
        "startLine": 75,
        "length": 12,
        "offset": 48,
        "surroundingCode": "     * @return a RSA public key\n     */\n    fun genPublicKey(`in`: String): RSAPublicKey {\n        val n = BigInteger.valueOf(`in`.split(\":\")[1].toLong())\n        val e = `in`.split(\":\")[2].toInt()"
      }
    }
  ],
  "attributes": {
    "module": "RSA4K.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6691917698654346235"
}]}